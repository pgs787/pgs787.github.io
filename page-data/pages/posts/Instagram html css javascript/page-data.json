{"componentChunkName":"component---src-templates-post-template-js","path":"/pages/posts/Instagram html css javascript","result":{"data":{"markdownRemark":{"id":"dff1f864-2891-52a3-a002-7184458ea5ce","html":"<h2 id=\"javascript-추천-가이드\" style=\"position:relative;\"><a href=\"#javascript-%EC%B6%94%EC%B2%9C-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\"javascript 추천 가이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript 추천 가이드</h2>\n<ul>\n<li><a href=\"https://github.com/airbnb/javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Airbnb 가이드 사이트</a> ⭐추천⭐<br>\n<strong>Airbnb는 프론트엔드 쪽에서 세계적으로 영향력이 크고 컨퍼런스도 자주 개최</strong></li>\n<li><a href=\"https://google.github.io/styleguide/htmlcssguide.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 가이드 사이트</a></li>\n<li><a href=\"https://docs.google.com/presentation/d/1a691zZsgQMZBftHI3RJpgy8CqYtTQi8ZSe3SMgU6Tac/edit#slide=id.g75ac57a38d_0_63\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">프론트엔드 개발자 김종민 포트폴리오</a><br>\n<strong>프론트엔드 분야에서 영향력이 큰 인물</strong><br>\n<strong>자바스크립트 시각화 기술력이 상당함</strong></li>\n</ul>\n<h3 id=\"리액트의-function-component-vs-class-component-차이\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%9D%98-function-component-vs-class-component-%EC%B0%A8%EC%9D%B4\" aria-label=\"리액트의 function component vs class component 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트의 function component vs class component 차이</h3>\n<ul>\n<li><strong><u>function component는 렌더 당시의 값을 기억하고 사용</u></strong> ❗❗</li>\n</ul>\n<h4 id=\"--function-component\" style=\"position:relative;\"><a href=\"#--function-component\" aria-label=\"  function component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- function component</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function ProfilePage(props) {\n  const showMessage = () =&gt; {\n    alert(&#39;Followed &#39; + props.user);\n  };\n\n  const handleClick = () =&gt; {\n    setTimeout(showMessage, 3000);\n  };\n\n  return (\n    &lt;button onClick={handleClick}&gt;Follow&lt;/button&gt;\n  );\n}</code></pre></div>\n<h4 id=\"--class-component\" style=\"position:relative;\"><a href=\"#--class-component\" aria-label=\"  class component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- class component</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ProfilePage extends React.Component {\n  showMessage = () =&gt; {\n    alert(&#39;Followed &#39; + this.props.user);\n  };\n\n  handleClick = () =&gt; {\n    setTimeout(this.showMessage, 3000);\n  };\n\n  render() {\n    return &lt;button onClick={this.handleClick}&gt;Follow&lt;/button&gt;;\n  }</code></pre></div>\n<ul>\n<li>setTimeout을 이용하여 네트워크에 요청을 보내고 응답을 돌려받는 코드</li>\n<li>props.user가 Dan이라면 이코드는 ‘Followed Dan’ 이라는 메시지를 3초 호출</li>\n<li>arrow function을 쓰는 것과 함수 선언을 하는 것이 이 예시에서는 아무런 차이 없음</li>\n<li>arrow function 대신 function handleClick()을 써도 정확히 같은 방식으로 동작</li>\n</ul>\n<h2 id=\"u차이점-설명u-\" style=\"position:relative;\"><a href=\"#u%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%84%A4%EB%AA%85u-\" aria-label=\"u차이점 설명u  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><u>차이점 설명</u> ❗❗❗❗</h2>\n<p><img src=\"https://overreacted.io/386a449110202d5140d67336a0ade5a0/bug.gif\" alt=\"1\"></p>\n<ul>\n<li>⭐ <u><strong>function 방식이 옳은 방식</strong></u>⭐</li>\n<li>팔로우 한 뒤 다른 사람의 프로필로 이동했다면 리액트 <u>component는 내가 팔로우한 대상을 헛갈려서는 안 됨</u></li>\n<li><u><strong>class의 이러한 작동 방식은 버그</strong></u></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ProfilePage extends React.Component {\n  showMessage = () =&gt; {\n    alert(&#39;Followed &#39; + this.props.user);\n  };</code></pre></div>\n<ul>\n<li>this.props.user를 가져와 읽는다</li>\n<li>this는 <u>언제나 변하지만 props는 리액트에서 불변</u></li>\n<li>showMessage 콜백은 어떠한 렌더에도 묶여 있지 않아 setTimeout이 this.props를 불러오도록 하는것은 그 관계를 망침</li>\n</ul>\n<h3 id=\"function-component가-없이-class-compoenet로-해결책\" style=\"position:relative;\"><a href=\"#function-component%EA%B0%80-%EC%97%86%EC%9D%B4-class-compoenet%EB%A1%9C-%ED%95%B4%EA%B2%B0%EC%B1%85\" aria-label=\"function component가 없이 class compoenet로 해결책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✅function component가 없이 Class compoenet로 해결책!!</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ProfilePage extends React.Component {\n  showMessage = (user) =&gt; {\n    alert(&#39;Followed &#39; + user);\n  };\n\n  handleClick = () =&gt; {\n    const {user} = this.props;\n    setTimeout(() =&gt; this.showMessage(user), 3000);\n  };\n\n  render() {\n    return &lt;button onClick={this.handleClick}&gt;Follow&lt;/button&gt;;\n  }\n}</code></pre></div>\n<ul>\n<li>렌더와 props 그리고 showMessage 콜백간의 관계를 props가 도중에 길을 잃지 않도록 고침</li>\n<li><u>this.props를 이벤트 발생 초기에 읽고, 이 값을 timeout 함수에 넘기는 방법</u></li>\n<li><strong>하나의 prop이상을 사용해야 할때나 state를 함께 사용해야 할 때 this.props나 this.state를 인자로 줘야 함</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class ProfilePage extends React.Component {\n  render() {\n    // Capture the props!\n    const props = this.props;\n    // Note: we are *inside render*.\n    // These aren&#39;t class methods.\n    const showMessage = () =&gt; {\n      alert(&#39;Followed &#39; + props.user);\n    };\n\n    const handleClick = () =&gt; {\n      setTimeout(showMessage, 3000);\n    };\n\n    return &lt;button onClick={handleClick}&gt;Follow&lt;/button&gt;;\n  }\n}</code></pre></div>\n<ul>\n<li>이는 만약 당신이 한번 props나 state를 지정한다면, 당신은 언제나 변하지 않는 그 값에 접근할 수 있다는 의미</li>\n<li><strong>props를 렌더가 되는 시점에 잡으면 됨</strong> => 특정 렌더에 해당하는 props를 의미</li>\n</ul>\n<h2 id=\"currenttarget-vs-target\" style=\"position:relative;\"><a href=\"#currenttarget-vs-target\" aria-label=\"currenttarget vs target permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>currentTarget vs target</h2>\n<ul>\n<li>currentTarget : 이벤트가 바인딩 상위 요소 리턴</li>\n<li>target : 선택된 해당 요소를 리턴</li>\n</ul>\n<h2 id=\"url-링크-열기\" style=\"position:relative;\"><a href=\"#url-%EB%A7%81%ED%81%AC-%EC%97%B4%EA%B8%B0\" aria-label=\"url 링크 열기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>url 링크 열기</h2>\n<ol>\n<li>a태그의 href=\"\" 이용</li>\n<li>onclick 이용<br>\n“location.href=\"\" => 현재 페이지에서 오픈<br>\nwindow.open(\"\") =>target=_blank와 같은 효과 (새로운창)</li>\n</ol>\n<h2 id=\"word-break-word-wrap\" style=\"position:relative;\"><a href=\"#word-break-word-wrap\" aria-label=\"word break word wrap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>word-break, word-wrap</h2>\n<ul>\n<li>word-break : 텍스트가 길어 지는 경우 줄 바꿈 제어 (단어 분리)\nbreak-all - 글자 기준, keep-all - 단어 기준</li>\n<li>word-wrap : 띄어쓰기가 없는 긴 단어를 어떻게 처리할지 정함 (줄 바꿈 설정)\nbreak-word - 보통 안 바꿔지는 단어들을 한 줄에서 대신 줄을 바꿀 만한 지점이 없을 시 임의의 지점에서 줄을 바꿈</li>\n</ul>\n<h2 id=\"뷰포트와-미디어쿼리-관계\" style=\"position:relative;\"><a href=\"#%EB%B7%B0%ED%8F%AC%ED%8A%B8%EC%99%80-%EB%AF%B8%EB%94%94%EC%96%B4%EC%BF%BC%EB%A6%AC-%EA%B4%80%EA%B3%84\" aria-label=\"뷰포트와 미디어쿼리 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰포트와 미디어쿼리 관계❓❓</h2>\n<h3 id=\"아무리-미디어-쿼리를-설정하더라도-뷰포트를-설정하지않으면-미디어-쿼리가-정상적으로-작동하지-않는다\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%AC%B4%EB%A6%AC-%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EB%8D%94%EB%9D%BC%EB%8F%84-%EB%B7%B0%ED%8F%AC%ED%8A%B8%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EC%A7%80%EC%95%8A%EC%9C%BC%EB%A9%B4-%EB%AF%B8%EB%94%94%EC%96%B4-%EC%BF%BC%EB%A6%AC%EA%B0%80-%EC%A0%95%EC%83%81%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9E%91%EB%8F%99%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"아무리 미디어 쿼리를 설정하더라도 뷰포트를 설정하지않으면 미디어 쿼리가 정상적으로 작동하지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아무리 미디어 쿼리를 설정하더라도 뷰포트를 설정하지않으면, 미디어 쿼리가 정상적으로 작동하지 않는다</h3>\n<ul>\n<li>미디어 쿼리는 기기의 width(가로)에 반응하여 작동</li>\n<li>뷰포트를 설정하지 않으면 스마트폰으로 접속시에도 가로 길이가 PC처럼 큰 값으로 측정되기 때문</li>\n</ul>\n<h2 id=\"text-overflow-조건\" style=\"position:relative;\"><a href=\"#text-overflow-%EC%A1%B0%EA%B1%B4\" aria-label=\"text overflow 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>text-overflow 조건</h2>\n<ol>\n<li>width 또는 height가 고정적일 것</li>\n<li>overflow: hidden; 을 사용해 영역을 감출 것</li>\n<li>아래줄로 내려가는 것을 막기위해 white-space: nowrap 등이 필요</li>\n</ol>\n<hr>\n<h4 id=\"사진-자료-및-사이트-출처\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A7%84-%EC%9E%90%EB%A3%8C-%EB%B0%8F-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EC%B6%9C%EC%B2%98\" aria-label=\"사진 자료 및 사이트 출처 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사진 자료 및 사이트 출처</h4>\n<ul>\n<li><a href=\"https://www.hamadevelop.me/reactfunctionclassdiff/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.hamadevelop.me/reactfunctionclassdiff/</a>\n리액트 컴포넌트 차이</li>\n</ul>","fields":{"slug":"/pages/posts/Instagram html css javascript","tagSlugs":["/tag/html/","/tag/css/","/tag/javascript/","/tag/instagram/","/tag/event객체/","/tag/wecode/"]},"frontmatter":{"date":"2020-01-31T23:41:32.169Z","description":"(1/31 - 2/3) Wecode study 4-6일차","tags":["html","css","javascript","instagram","event객체","wecode"],"title":"Instagram 클론 (HTML+CSS+JavaScript)","socialImage":""}}},"pageContext":{"slug":"/pages/posts/Instagram html css javascript"}}}